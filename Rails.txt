The Rails philosophy includes two major guiding principles:
    Don't Repeat Yourself - every piece of knowledge must have a single, unambiguous, authoritative representation within a system
    Convention over Configuration - default to a set of conventions, rather than require that you specify minutiae through endless config files


Rails comes with a number of scripts called generators that are designed to make your development life easier by creating everything that's necessary to start 
working on a particular task. 
One of these is the new application generator, which will provide you with the foundation of a fresh Rails app so that you don't have to write it yourself
To use the generator, open a terminal, run: rails new blog
This will create a Rails app called Blog in a blog directory and install the gem dependencies that are already mentioned in Gemfile using bundle install

app/ - contains the controllers, models, views, helpers, mailers, channels, jobs, and assets for your app
bin/ - contains the rails script that starts your app and can contain other scripts you use to set up, update, deploy, or run your app
config/ - contains configuration for your app's routes, database, and more
config.ru - contains configuration for Rack based servers used to start the app
db - contains your current database schema, as well as the database migrations
Gemfile, Gemfile.lock - These files allow you to specify what gem dependencies are needed for your Rails app. These are used by the Bundler Gem
lib/ - extended modules for your app
log/ - app log files
package.json - allows you to specify what npm dependencies are needed for your Rails app. This file is used by Yarn
public/ - contains static files and complied assets. When your app is running, this directory will be exposed as is
Rakefile - locates and loads tasks that can be run from the command line. The task definitions are defined throughout the components of Rails. Rather than
changing Rakefile, you should add your own tasks by adding files to the lib/tasks directory
storage/ - active storage files for Disk Service
test/ - unit tests, fixtures, and other test  apparatus
tmp/ - temporary files (like cache and pid files)
vendor/ - a place for all third party code

Starting a web server
ruby bin/rails server
This will start up Puma, a web server distributed with Rails by default
In dev, Rails does not generally require you to restart the server

To get Rails to say "Hello", you need to create at minimum a route, a controller with an action, and a view. 
A route maps a request to a controller action
A controller action performs the necessary work to handle to request, and prepares any data for the view
A view displays data in a desired format

Controllers are Ruby classes, and their public methods are actions. 
Views are templates, usually written in a mix of HTML and Ruby

MVC (Model-View-Controller)
A design pattern that divides the responsibilities of an app to make it easier to reason about

A model is a Ruby class that is used to represent data. 
Additionally, models can interact with the app's database through a feature of Rails called Active Record
Model names are singular, because an instantiated model represents a single data record  

Migrations are used to alter the structure of an app's database
In Rails apps, migrations are written in Ruby so that they can be database agnostic

ERB is a templating system that evaluates Ruby code embedded in a document
<% %> means "evaluate the enclosed Ruby code"
<%= %> means "evaluate the enclosed Ruby code, and output the value that it returns"

What happens when we go to http://localhost:3000:
    The browser makes a request: GET http://localhost:3000
    Our Rails app receives this request
    The Rails router maps the root route to the index action of ArticlesController
    The index action uses the Article model to fetch all articles in the database
    Rails automatically renders the app/views/articles/index.html.erb view
    The ERB code in the view is evaluated to output HTML
    The server sends a response containing the HTML back to the browser

Whenever we have such a combination of routes, controller actions, and views that work together to perform CRUD operations on an entity, we call that entity
a resource
In our app, we would say that an article is a resource
Rails provides a routes method named resources that maps all of the conventional routes for a collection of resources, such as articles
The resources method also sets up URL and path helper methods that we can use to keep our code from depending on a specific route configuration

Validations
Rules that are checked before a model object is saved
This feature is provided by Rails to help us deal with invalid user input
If any of the checks fail, the save will be aborted, and the appropriate error messages will be added to the errors attribute of the model object